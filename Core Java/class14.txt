Editplus Editor
================
Download link : https://www.editplus.com/download.html



Typecasting 
============
The process of converting from one datatype to another datatype is called typecasting.

In java, typecasting can be performed in two ways.

1) Implicit typecasting 

2) Explicit typecasting

1) Implicit typecasting 
-----------------------
If we want to store small value in a bigger variable then we need to use implicit typecasting.

A compiler is responsible to perform implicit typecasting.

There is no possibility to loss the information.

It is also known as Widening or Upcasting.

We can perform implicit typecasting as follow.

ex:
	byte --> short
			-->
				int -->	long --> float --> double				
			-->
		 char


ex:1
----
class Test 
{
	public static void main(String[] args) 
	{
		byte b=10;

		int i=b;

		System.out.println(i); // 10
	}
}

ex:2
-----
class Test 
{
	public static void main(String[] args) 
	{
		char ch='a';

		int i=ch;

		System.out.println(i); // 97
	}
}

ex:3
----
class Test 
{
	public static void main(String[] args) 
	{
		int i=65;

		float f=i;

		System.out.println(f);// 65.0
	}
}
	
2) Explicit typecasting
-----------------------
If we want to store bigger value into a smaller variable then we need to use explicit typecasting.

A programmer is responsible to perform explicit typecasting.

There is a possibility to loss the information.

It is also known as Narrowing or Downcasting.

We can perform explicit typecasting as follow.

ex:
	byte <-- short
			<--
				int <--	long <-- float <-- double				
			<--
		 char
	
ex:1
----
class Test 
{
	public static void main(String[] args) 
	{
		float f=10.56f;

		int i=(int)f;

		System.out.println(i);//10
	}
}

ex:2
----
class Test 
{
	public static void main(String[] args) 
	{
		int i=65;

		char ch=(char)i;

		System.out.println(ch);//A 
	}
}

ex:3
----
class Test 
{
	public static void main(String[] args) 
	{
		int i=130;

		byte b=(byte)i;

		System.out.println(b); // -126
	}
}

Types of blocks in java
========================
A block is a set of statements which is enclosed in a curly braces i.e {}.

In java, we have three types of blocks.

1) Instance block 

2) Static block 

3) Local block 


1) Instance block 
-----------------
A instance block is used to initialize the instance variables.

A instance block must and should declare immediately after the class but not inside methods and constructors.

A instance block will execute when we create an object.

syntax:
-----
	//instance block
	{
		-
		- //set of statements 
		-
	}

ex:1
------
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");
	}
}

o/p:
	main-method 

ex:2
-----
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");
		Test t=new Test();
	}
}
o/p:
	main-method 
	instance-block

ex:3
-----
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");
		Test t2=new Test();
	}
}

o/p:
	instance-block 
	main-method 
	instance-block

ex:4
----
class Test 
{
	//instance variable
	int i;

	//instance block
	{
		i=100;
	}


	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.i);
	}
}

2) Static block 
---------------
A static block is used to initialize the values to static variables.

A static block must and should declare immediately after the class using static keyword but not inside methods and constructors.

A static block will be executed at the time of classloading.

ex:1
----
class Test 
{
	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");	
	}
}
o/p:
	static-block
	main-method 

ex:2
-----
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}

	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println("main-method");
		
	}
}
o/p:
	static-block
	instance-block
	main-method 

ex:3
-----
class Test 
{
	//static variable 
	static int i;

	//static block
	static
	{
		i=200;
	}

	public static void main(String[] args) 
	{
		System.out.println(i);//200
	}
}

3) Local block
--------------
A local block is used to initialize the values to local variables.

A local block must and should declare inside methods and constructors.

A local block will execute just like normal statement.

syntax:
-------
	//local block
	{
		-
		- //set of statements 
		-
	}
	
ex:1
----
class Test 
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");

		//local block
		{
			System.out.println("stmt2");
		}

		System.out.println("stmt3");
	}
}

ex:2
----
class Test 
{
	public static void main(String[] args) 
	{
		//local variables 
		int i;

		//local block
		{
			i=300;
		}

		System.out.println(i);//300
	}
}


Interview Question
==================

Q) Can we execute java program without main method?

Yes, Till Java 6 version it is possible to execute java program without main method using static block.But from Java 7 version onwards it is not possible to execute java program without main method.

ex:
class Test 
{
	//static block
	static
	{
		System.out.println("Hello World");
		System.exit(0);
	}
}


Q) Is java purely object oriented or not?

No, java will not consider as purely object oriented because it does not support many 
OOPS concepts likes multiple inheritance, operator overloading and more ever we depends upon
primitive datatypes which are non-objects.





















































































































































