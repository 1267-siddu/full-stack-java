Interface
=========
Interface is a collection of abstract methods, default methods and static methods.

Abstract methods are incomplete methods because they ends with semicolon and don't have any body.

ex:
	void m1();

It is not possible to create object for interfaces.

To write the implementation of abstract methods an interface we will use implementation class.

It is possible to create object for implementation class but it contains method with body.

By default every abstract method is a public and abstract.

ex:
	public abstract void m1();

Interface contains only constants i.e public static final.

syntax:
------
	interface  <interface_name>
	{
		-
		- // abstract methods  
		- // default methods 
		- // static methods 
		- // constants 
		-
	}

If we know service requirement specification then we need to use interface.

Diagram: class31.1


ex:
----
interface A 
{
	void m1();
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
	}
}

ex:
---
interface A 
{
	void m1();
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}

If interface contains four methods then we need to override all methods otherwise we will get compile time error.

ex:

interface A 
{
	public abstract void see();
	public void show();
	abstract void view();
	void display();
}
class B implements A 
{
	public void see()
	{
		System.out.println("See Method");
	}
	public void show()
	{
		System.out.println("Show Method");
	}
	public void view()
	{
		System.out.println("View Method");
	}
	public void display()
	{
		System.out.println("Display Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.see();
		a.show();
		a.view();
		a.display();
	}
}

In java, a class can't extends more then one class simultenously.

But an interface can extends more then one interface simultenously.

ex:
---
interface A 
{
	public void m1();
}
interface B 
{
	public void m2();
}
interface C extends A,B 
{
	public void m3();
}
class D implements C 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		C c=new D();
		c.m1();
		c.m2();
		c.m3();
	}
}

A class can implements more then one interface.

ex:
---
interface Father 
{
	float HT=6.2f;
	void height();
}
interface Mother
{
	float HT=5.8f;
	void height();
}
class Child implements Father,Mother 
{
	public void height()
	{
		float height=(Father.HT+Mother.HT)/2;
		System.out.println("Child Height is ="+height);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Child c=new Child();
		c.height();
	}
}


Marker interface
================
An interface which does not have any methods and constants is called marker interface.

In general, Empty interface is called marker interface.

Using marker interface we will get some ability to do.

We have following list of marker interfaces.

ex:
	Serializable 
	Remote 
	Cloneable 
	and etc.

ex:
---
import java.io.Serializable;
class Item  implements Serializable
{
	private int itemId;
	private String itemName;
	private double itemPrice;

	//setter methods 
	public void setItemId(int itemId)
	{
		this.itemId=itemId;
	}
	public void setItemName(String itemName)
	{
		this.itemName=itemName;
	}
	public void setItemPrice(double itemPrice)
	{
		this.itemPrice=itemPrice;
	}

	//getter methods 
	public int getItemId()
	{
		return itemId;
	}
	public String getItemName()
	{
		return itemName;
	}
	public double getItemPrice()
	{
		return itemPrice;
	}
}


Q) Why can't we create object for interfaces?

In Java, we cannot create objects of interfaces directly because they are abstract by nature.



Abstract class
===============
Abstract class is a collection of zero or more abstract methods and concrete methods.

A "abstract" keyword we can apply for methods and classes but not for variables.

It is not possible to create object for abstract class.

To write the implemenation of abstract methods an abstract class we will use sub classes.

By default every abstract method is a public and abstract.

Abstract class contains only instance variables.

syntax:
	abstract class <class_name>
	{
		- 
		- //abstract methods 
		- //concrete methods 
		- //instance variables 
		-
	}
If we know partial implementation then we need to use abstract class.

ex:
----
abstract class Plan 
{
	//instance variable
	protected double rate;

	//abstract method 
	public abstract void getRate();

	//concrete method
	public void calculateBillAmount(int units)
	{
		System.out.println("Total Units :"+units);
		System.out.println("Total Bill :"+ units*rate);
	}
}
class DomesticPlan extends Plan 
{
	public void getRate()
	{
		rate=2.5d;
	}
}
class CommercialPlan extends Plan
{
	public void getRate()
	{
		rate=5.0d;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		DomesticPlan dp=new DomesticPlan();
		dp.getRate();
		dp.calculateBillAmount(250);

		CommercialPlan cp=new CommercialPlan();
		cp.getRate();
		cp.calculateBillAmount(250);
	}
}



Q) Why we can't create object for abstract class?

We cannot create an object for an abstract class in Java because it is a incomplete class.

 


Q) What is the difference between interface and abstract class?

Interface					Abstract class
----------------				---------------
To declare interface we will use interface	To declare abstract class we will use abstract
keyword.					keyword.

It is a collection of abstract methods,		It is a collection of abstract methods and 
default methods and static methods.		concrete methods.

We can achieve multiple inheritance.		We can't achieve multiple inheritance.

It does not allow constructor.			It allows constructor.

It does not allow blocks.			It allows blocks.

To write the implementation for abstract 	To write the implementation for abstract methods 
methods we will use implementation class.	we will use sub class.

If we know only specification then we need 	If we know partial implementation then we need 
to use interface.				to use abstract class.



























































































































