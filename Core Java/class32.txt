API
====
API stands for Application Programming Interface.

API is a collection of packages.

It is a base for the programmers to develop software applications.

In java, API's are divided into three types.

1) Predefined API 
-------------------
	Built-In API is called predefined API.
	ex:
		https://docs.oracle.com/javase/8/docs/api/

2) Userdefined API
------------------
	API which is created by the user is called userdefined API.
	ex:
		http://localhost:9090/customer/fetch

3) Third party API 
-----------------
	API which is given by third party vendors.
	ex:
		https://restcountries.com/v3.1/all	


Packages
=========
A package is a collection of classes,interfaces,enums and annotations.

Here enum is a special class and annotation is a special interface.

In general, a package is a collection of classes and interfaces.

A package is also known as folder or a directory.

In java, packages are divided into two types.

1) Predefined packages 

2) Userdefined packages 

1) Predefined packages 
-----------------------
Built-In packages are called predefined packages.
ex:
	java.lang
	java.io
	java.time
	java.text
	java.util
	java.util.stream
	java.sql
	javax.servlet 
	and etc.

2) Userdefined packages 
------------------------
Packages which are created by the user based on the application requirement are called
userdefined packages.

It is highly recommanded to declare package name in the reverse order of url.

syntax:
	 package <package_name>;

ex:
---
package com.ihub.www;
import java.util.Calendar;
class Test  
{
	public static void main(String[] args) 
	{
		Calendar c=Calendar.getInstance();
		//convert time to 24 hours
		int h=c.get(Calendar.HOUR_OF_DAY);

		if(h<12)
			System.out.println("Good Morning");
		else if(h<16)
			System.out.println("Good Afternoon");
		else if(h<20)
			System.out.println("Good Evening");
		else 
			System.out.println("Good Night");
	}
}

We can compile above program by using below command.
ex:

		current directory 
		       |	
	javac    -d    .   Test.java
		 |
	destination folder 


We can run above program by using below command.
ex:
	
	java   com.ihub.www.Test
		    |
		package name 


Wrapper classes
===============
The main objective of wrapper classes are

1) To wrap primitive to wrapper object and vice versa.

2) To define several utility methods.

ex:

primitive type				Wrapper class
---------------				--------------
byte					Byte 
short					Short
int					Integer
long					Long
float					Float
double					Double
boolean					Boolean
char 					Character 

constructor
------------
For every wrapper class we can create two objects.One will take corresponding primitive as an argument and another will take corresponding String as an argument.

ex:

	wrapper class			contructor
	---------------			-----------
	Byte				byte or String 
	Short				short or String
	Integer				int or String
	Long				long or String 
	Float				float or String 
	Double				double or String
	Boolean				boolean or String 
	Character			char 


ex:1
----

class Test  
{
	public static void main(String[] args) 
	{
		Integer i1=new Integer(10);
		System.out.println(i1);

		Integer i2=new Integer("20");
		System.out.println(i2);
	}
}

ex:2
----

class Test  
{
	public static void main(String[] args) 
	{
		Boolean b1=new Boolean(true);
		System.out.println(b1);

		Boolean b2=new Boolean("false");
		System.out.println(b2);
	}
}

ex:3
----

class Test  
{
	public static void main(String[] args) 
	{
		Character c=new Character('a');
		System.out.println(c);
	}
}

Utility Methods
-----------------

1) valueOf() 
-------------
It is similar to constructor.
It is used to convert primitive type to wrapper object.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		Integer i1=Integer.valueOf(10);
		System.out.println(i1); //10

		Integer i2=Integer.valueOf("20");
		System.out.println(i2);//20
	}
}

2) xxxValue()
-------------
It is used to convert primitive type to wrapper object.

ex:


class Test  
{
	public static void main(String[] args) 
	{
		Integer i=new Integer(10);
		
		byte b=i.byteValue();
		System.out.println(b);

		short s=i.shortValue();
		System.out.println(s);
	}
}

3) parseXxx() 
-------------
It is used to convert string type to primitive type.

ex:


class Test  
{
	public static void main(String[] args) 
	{
		String str="20";

		int i=Integer.parseInt(str);
		System.out.println(i); //20

		long l=Long.parseLong(str);
		System.out.println(l); //20

		float f=Float.parseFloat(str);
		System.out.println(f); //20.0
	}
}


4) toString()
---------------
It is used to convert wrapper object to string type. 

ex:

class Test  
{
	public static void main(String[] args) 
	{
		Integer i=new Integer(10);

		String s=i.toString();

		System.out.println(s);
	}
}

Q) Write a java to perform sum of two binary numbers?

Input:
	1010
	0101
Output:
	1111

ex:
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the binary1 :");
		String binary1=sc.next(); //1010

		System.out.println("Enter the binary2 :");
		String binary2=sc.next(); //0101

		//convert binary to decimal 
		int a=Integer.parseInt(binary1,2);
		int b=Integer.parseInt(binary2,2);
		int c=a+b;

		//converting decimal to binary
		String result=Integer.toBinaryString(c);
		System.out.println(result);
	}
}










































































































