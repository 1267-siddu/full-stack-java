import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList<String> java=new ArrayList<String>();
		java.add("html");
		java.add("css");
		java.add("bootstrap");
		java.add("reactjs");
		java.add("java");
		java.add("frameworks");
		System.out.println(java); //[html,css,bootstrap,reactjs,java,frameworks]

		ArrayList<String> dotnet=new ArrayList<String>();
		dotnet.add("html");
		dotnet.add("css");
		dotnet.add("bootstrap");
		dotnet.add("angularjs");
		dotnet.add("dotnet");
		dotnet.add("frameworks");
		System.out.println(dotnet); //[html,css,bootstrap,angularjs,dotnet,frameworks]

		java.retainAll(dotnet);
		
		System.out.println(java); //[html,css,bootstrap,frameworks]
		
	}
}


LinkedList
===========
The underlying data structure is doubly linkedlist.

Duplicate objects are allowed.

Order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and Deque interface.

If our frequent operation is a adding and removing in the middle then we need to use LinkedList.


LinkedList contains following methods.
ex:
	public E getFirst();
  	public E getLast();
  	public E removeFirst();
  	public E removeLast();
  	public void addFirst(E);
  	public void addLast(E);

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList ll=new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		ll.add("one");
		System.out.println(ll);//[one,two,three,one]
		ll.add(10);
		System.out.println(ll); //[one,two,three,one,10]
		ll.add(null);
		System.out.println(ll);//[one,two,three,one,10,null]
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll1=new LinkedList<String>();
		ll1.add("one");
		ll1.add("two");
		ll1.add("three");
		System.out.println(ll1);//[one,two,three]

		LinkedList<String> ll2=new LinkedList<String>();
		ll2.add("raja");
		System.out.println(ll2);//[raja]

		ll2.addAll(ll1);

		System.out.println(ll2);//[raja,one,two,three]

		System.out.println(ll2.containsAll(ll1)); //true 

		ll2.removeAll(ll1);
		System.out.println(ll2); //[raja]

		
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll); // [one,two,three]

		ll.addFirst("gogo");
		ll.addLast("jojo");
		System.out.println(ll); // [gogo,one,two,three,jojo]

		System.out.println(ll.getFirst());//gogo
		System.out.println(ll.getLast());//jojo

		ll.removeFirst();
		ll.removeLast();
		System.out.println(ll);//[one,two,three]

		
	}
}

Vector
=======
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

All methods present in Vector are synchronized.Hence we can achieve thread safety.

Vector class contains following methods.

ex:
	addElement()
	removeElement()
	firstElement()
	lastElement()
	removeAllElements()
	and etc.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Vector<Integer> v=new Vector<Integer>();
		System.out.println(v.capacity());

		for(int i=1;i<=10;i++)
		{
			v.addElement(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		System.out.println(v.firstElement()); //1 
		System.out.println(v.lastElement()); //10

		v.removeElement(5);
		System.out.println(v);//[1,2,3,4,6,7,8,9,10]

		v.removeAllElements();
		System.out.println(v);//[]


	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Vector<Integer> v=new Vector<Integer>();
		System.out.println(v.capacity());

		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		System.out.println(v.get(0)); //1 
		System.out.println(v.get(v.size()-1)); //10

		v.remove(4);
		System.out.println(v);//[1,2,3,4,6,7,8,9,10]

		v.clear();
		System.out.println(v);//[]


	}
}

Stack
======
It is a child class of Vector class.

If we depends upon Last In First Out (LIFO) order then we need to use Stack.

constructor
---------
Stack s=new Stack();
 
methods
--------
1) push()
---------
	It is used to push the element in a Stack.

2) pop()
--------
	It is used to remove the element from stack.

3) peek()
----------
	It will return toppest element from stack.

4) isEmpty()
----------
	It is used to check stack is empty or not.

5) search()
----------
	It will return offet value if element is found otherwise it will return -1.

ex:
---









































































