How to convert decimal to binary 
--------------------------------
Decimal No	: 10

Binary No 	: 1010

	2|10
         --- 0
	2|5
	 --- 1
	2|2
	 --- 0		^
	  1		|
	-----------------
	1 0 1 0


How to convert binary to decimal 
--------------------------------
Binary No 	: 1010
Decimal No	: 10 

	1 0 1 0 
	       <----
	
	0*1 +  1*2 +  0*4 +  1*8

	0 + 2 + 0 + 8 

	10


4) Bitwise operators 
=====================

Bitwise AND operator (&&)
--------------------------
Bitwise AND operator deals with binary numbers.

Truth table
----------
T	T	= T
T	F	= F
F	T	= F 
F	F	= F

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		int c = a & b;
		System.out.println(c); //10
	}
}

/*
	10 - 1010
	15 - 1111
	----------
	&  - 1010
		     <---
	0*1 + 1*2 + 0*4 + 1*8
	0+2+0+8 =10
*/

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;
		int c = a & b;
		System.out.println(c); //0
	}
}

/*
	10 - 1010
	5  - 0101
	----------
	&  - 0000
	
*/

Bitwise OR operator (|)
-----------------------
Bitwise OR operator deals with binary numbers.

Truth table
----------
T	T	= T
T	F	= T
F	T	= T 
F	F 	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		int c = a | b;
		System.out.println(c); //15
	}
}

/*
	10 - 1010
	15 - 1111
	----------
	|  - 1111
			  <---
	1*1 + 1*2 + 1*4 + 1*8 
	1 + 2 + 4 + 8 = 15	

	
*/

Bitwise XOR operator (^)
-------------------------
Bitwise XOR opertor deals with binary numbers.

Truth table
-----------
T	T	= F
T	F	= T
F	T	= T 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;
		int c = a ^ b;
		System.out.println(c); //15
	}
}

/*
	10 - 1010
	5  - 0101
	----------
	^  - 1111  

	
*/

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		int c = a ^ b;
		System.out.println(c); //5
	}
}

/*
	10 - 1010
	15 - 1111
	----------
	^  - 0101

	
*/

Bitwise Not operator (~)
-------------------------

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		int i=~10;
		System.out.println(i); // -11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=~23;
		System.out.println(i); //-24
	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i=~98;
		System.out.println(i); //-99
	}
}

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		int i=~(-10);
		System.out.println(i); //9
	}
}

Q) Write a java program to find out swapping of two numbers using bitwise operator?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt();

		System.out.println("Enter the second number :");
		int b=sc.nextInt();

		System.out.println("Before swapping a="+a+" and b="+b);

		a = a ^ b;
		b = a ^ b; 
		a = a ^ b;  

		System.out.println("After swapping a="+a+" and b="+b);

	}
}

5) Arithmetic operators
------------------------
% - modules 
/ - division 
* - multiplication
+ - addition
- - subtraction 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=6+7%2+8/4+7*5+9/10+5-20;
		System.out.println(i); //29
	}
}
/*
	6 + 7%2 + 8/4 + 7*5 + 9/10 + 5 - 20

	6 + 1 + 2 + 35 + 0 + 5 - 20

	49 - 20

	29

*/


6) Relational operators 
========================
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(5>2);// true 
		System.out.println(5<2);// false
		
		System.out.println(5>=2);// true 
		System.out.println(5<=5);// true 

		System.out.println(10 == 10);// true 
		System.out.println(10 == 20);// false

		System.out.println(10 != 10);// false 
		System.out.println(10 != 20);// true 
	}
}

7) Shift operators 
===================

Right Shift operator (>>)
-------------------------
10 >> 1 	= 10/2 

10 >> 2 	= 10/4

10 >> 3		= 10/8

10 >> 4 	= 10/16

-
-
 

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i= 10 >> 3;  // 10 / 8(2*2*2)

		System.out.println(i); // 1 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= 20 >> 2;  // 20 / 4

		System.out.println(i); // 5
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= 10 >> 7;  //10 / 128

		System.out.println(i); // 0
	}
}

Left Shift operator (<<)
-------------------------
10 << 1 	= 10*2 

10 << 2 	= 10*4

10 << 3		= 10*8

10 << 4 	= 10*16

ex:
class Test  
{
	public static void main(String[] args) 
	{
		int i= 10 << 3; //10 * 8 (2*2*2)

		System.out.println(i); // 80
	}
}

ex:
class Test  
{
	public static void main(String[] args) 
	{
		int i= 20 << 4;  // 20 * 16

		System.out.println(i); // 320
	}
}


Unary operators
=================

Increment/Decrement operators (++/--)
-------------------------------------
We have two type of increment operators.

1) post-increment 
----------------
	ex:
		i++;

2) Pre-increment 
----------------
	ex:
		++i;

We have two types of decrement operators.

1) Post-decrement 
-----------------
	ex:
		i--;

2) pre-decrement 
---------------
	ex:
		--i;


POST increment/decrement operators
-----------------------------------
Rule1: First Take 

Rule2: Then Change 

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		i++;

		System.out.println(i); // 11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(i++); // 10
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i++;

		System.out.println(i+" "+j); //11  10
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i++ + i++; //10 +11

		System.out.println(i+" "+j); // 12   21
	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i-- + i--; //10 + 9 

		System.out.println(i+" "+j); // 8 19
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i++ + i-- - i++; // 10 + 11 - 10 

		System.out.println(i+" "+j); // 11  11
	}
}

Pre increment/decrement operators
------------------------------
Rule1: First Change 

Rule2: Then Take 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		++i;

		System.out.println(i); // 11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(++i); 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
	
		int j = ++i;

		System.out.println(i+" "+j);// 11   11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
	
		int j = --i + --i; // 9 + 8 

		System.out.println(i+" "+j);// 8 17
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
	
		System.out.println(i++ + ++i);// 10 + 12 = 22
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
	
		System.out.println(++(i++));// C.T.E 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=100;

		100++;
	
		System.out.println(i);//C.T.E  
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		++(++i);

		System.out.println(i);//
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		byte b=127;

		b++;

		System.out.println(b); //-128 
	}
}














































































































































































































































































































































 















