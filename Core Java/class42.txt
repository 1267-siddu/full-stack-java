ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		Stack<String> s=new Stack<String>();
		s.add("A");
		s.add("B");
		s.add("C");
		System.out.println(s);//[A,B,C]

		s.pop();
		System.out.println(s);//[A,B]

		System.out.println(s.peek());//B

		System.out.println(s.isEmpty());//false

		System.out.println(s.search("Z"));//-1

		System.out.println(s.search("A"));//2

	}
}

Q) Write a java program to display the list in reverse order?

import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		List<String> list=Arrays.asList("apple","ball","cat","dog");
		System.out.println(list);//[apple,ball,cat,dog]

		Collections.reverse(list);
		System.out.println(list); //[dot,cat,ball,apple]

	}
}

Q) Write a java program to display the list in sorting order?

input:
	ball dog elephant apple cat

output:
	apple ball cat dog elephant 

import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		List<String> list=Arrays.asList("ball","dog","elephant","apple","cat");
		System.out.println(list);//[ball,dog,elephant,apple,cat]

		Collections.sort(list);
		System.out.println(list); //[apple, ball, cat, dog, elephant]

	}
}


Q) Write a java program to check given string is balanced or not?

input:
	[{()}]

output:
	It is balanced string 

ex:

import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		String str="[{()}]";
		
		if(isBalanced(str.toCharArray()))
			System.out.println("It is balanced string");
		else
			System.out.println("It is not balanced string");
	}
	public static boolean isBalanced(char[] carr)
	{
		Stack<Character> s=new Stack<Character>();
		
		for(char ch:carr)
		{
			if(ch=='[' || ch=='{' || ch=='(')
			{
				s.push(ch);
			}
			else if(ch==']' && !s.isEmpty() && s.peek()=='[')
			{
				s.pop();
			}
			else if(ch=='}' && !s.isEmpty() && s.peek()=='{')
			{
				s.pop();
			}
			else if(ch==')' && !s.isEmpty() && s.peek()=='(')
			{
				s.pop();
			}
			else
			{
				return false;
			}
		}
		
		return s.isEmpty();
	}
}

Set
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are not allowed and order is not preserved then we need to use Set interface.

Diagram: class42.1 


HashSet
--------
The underlying data structure is Hashtable.

Duplicate objects are not allowed.

Insertion order is not preserved because it will take hash code of an object.

Hetrogeneous objects are allowed.

Null insertion is possible.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		HashSet hs=new HashSet();
		hs.add("nine");
		hs.add("four");
		hs.add("one");
		hs.add("six");
		System.out.println(hs);//[nine, six, four, one]
		hs.add("nine");
		System.out.println(hs);//[nine, six, four, one]
		hs.add(10);
		System.out.println(hs);//[nine, six, four, one, 10]
		hs.add(null);
		System.out.println(hs);//[null, nine, six, four, one, 10]

	}
}

LinkedHashSet
=============
It is a child class of HashSet class.

LinkedHashSet is exactly same as HashSet class with following differences.


HashSet						LinkedHashSet
-------						-------------
The underlying data structure is Hashtable.	The underlying data structure is Hashtable and 
						LinkedList.

Insertion order is not preserved.		Insertion order is preserved.

It is introduced in 1.2v.			It is introduced in 1.4v.

ex:

import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		LinkedHashSet lhs=new LinkedHashSet();
		lhs.add("nine");
		lhs.add("four");
		lhs.add("one");
		lhs.add("six");
		System.out.println(lhs);//[nine, four, one, six]
		lhs.add("nine");
		System.out.println(lhs);//[nine, four, one, six]
		lhs.add(10);
		System.out.println(lhs);//[nine, four, one, six, 10]
		lhs.add(null);
		System.out.println(lhs);//[nine, four, one, six, 10, null]

	}
}

TreeSet
========
The underlying data structure is Balanced Tree.

Duplicate objects are not allowed.

Insertion order is not preserved because it will take sorting order of an object.

Hetrogeneous objects are not allowed.

If we try to insert hetrogeneous objects then we will get ClassCastException.

For empty TreeSet, if are trying to insert null then we will get NullPointerException.

For non-empty TreeSet, if we are trying to insert null then we will get NullPointerException.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		TreeSet ts=new TreeSet();
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(3);
		System.out.println(ts); //[1, 3, 5, 10]
		ts.add(10);
		System.out.println(ts); //[1,3,5,10]

		//ts.add("hi");
		//System.out.println(ts);//R.E ClassCastException'

		//ts.add(null);
		//System.out.println(ts);// R.E NullPointerException


	}
}


Q) What is the difference between Comparable and Comparator interface?

Comparable
-----------
Comparable interface present in java.lang package.

It contains following one method i.e compareTo() method.

ex:
	obj1.compareTo(obj2)

	It will return -ve if obj1 comes before obj2.
	It will return +ve if obj1 comes after obj2.
	It will return 0 if both objects are same.	


If depends upon default natural sorting order then we need to use Comparable interface.

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		System.out.println("A".compareTo("Z")); // -25
		
		System.out.println("Z".compareTo("A")); // 25

		System.out.println("K".compareTo("K")); // 0
	}
}

Comparator 
------------
Comparator interface present in java.util package.

It contains following two methods i.e compare() method and equals() method.

ex:
	public int compare(Object obj1,Object obj2)


	It will return +ve if obj1 comes before obj2.
	It will return -ve if obj1 comes after obj2.
	It will return 0 if both objects are same.

If we depend upon customized sorting order then we need to use Comparator interface.

Implementation of equals() method is optional because it is avaiable by default through inheritance.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(3);
		System.out.println(ts);//[10, 5, 3, 1]
	}
}
class MyComparator implements Comparator
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;

		if(i1<i2)
			return 1;
		else if(i1>i2)
			return -1;
		else 
			return 0;
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(3);
		System.out.println(ts);//[1, 3, 5, 10]
	}
}
class MyComparator implements Comparator
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;

		if(i1<i2)
			return -1;
		else if(i1>i2)
			return 1;
		else 
			return 0;
	}
}

Q) Write a java program to display distinct elements from given array?

input:
	1 2 2 3 3 3 4 4 4 4

output:
	1 2 3 4 

ex:

import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		int[] arr={1,2,2,3,3,3,4,4,4,4};

		Set<Integer> set=new LinkedHashSet<Integer>();

		for(int i:arr)
		{
			set.add(i);
		}

		set.forEach(element-> System.out.print(element+" "));
	}

}
















































































































































