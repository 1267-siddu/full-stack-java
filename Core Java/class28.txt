Abstraction
===========
Hiding internal implementation and highlighting the set of services is called abstraction.

Using abstract classes and interfaces we can implements abstraction.

The main objective of abstraction is to hide the code.

Realtime example
----------------
The best example of abstraction is GUI(Graphical User Interface) ATM machine where bank people will hide internal implementation and they will highlight set of services like banking, withdrawl, deposit, mini statement and etc.

The main advantages of abstraction are

1) It gives security because it will hide internal implementation from the outsider.

2) Enhancement becomes more easy because without effecting enduser they can perform any changes 
   in our internal system.

3) It provides flexibility to the enduser to use the system.

4) It improves maintainability of an application.

Encapsulation
=============
The process of encapsulating or grouping variables and it's associate methods in a single entity is called encapsulation.

A class is said to be encapsulated class if it supports data hiding and abstraction.

The main object of encapsulation is to protect the data.

Realtime example
----------------
The best example of encapsulation is capsule.

Diagram: class28.1


In encapsulation  for every variable we need to write setter and getter method.

Diagram: class28.2

The main advantages of encapsulation are

1) It gives security.

2) Enhancement becomes more easy.

3) It provides flexibility to the enduser to use the system.

4) It improves maintainability of an application.

The main disadvantage of encapsulation is , it will increase the length of our code and slow down the execution process.

ex:
---
class Student 
{
	private int studId;
	private String studName;
	private double studFee;

	//setter methods
	public void setStudId(int studId)
	{
		this.studId=studId;
	}
	public void setStudName(String studName)
	{
		this.studName=studName;
	}
	public void setStudFee(double studFee)
	{
		this.studFee=studFee;
	}

	//getter methods 
	public int getStudId()
	{
		return studId;
	}
	public String getStudName()
	{
		return studName;
	}
	public double getStudFee()
	{
		return studFee;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Student s=new Student();
		s.setStudId(101);
		s.setStudName("Alan");
		s.setStudFee(1000d);

		System.out.println("Student Id :"+s.getStudId());
		System.out.println("Student Name :"+s.getStudName());
		System.out.println("Student Fee :"+s.getStudFee());
	}
}


Q) What is tightly encapsulated class?

A class is said to be tightly encapsulated class if and only if all variables of that class must be declare as private and here we don't need to check these variables having setter and getter method or not.

ex:
	class A 
	{
		int i=10;
	}
	It is not a tighly encapsulated class.

ex:
---
	class A 
	{
		private int i=10;
	}
	It is a tighly encapsulated class.


ex:
---
	class A 
	{
		int i=10;
	}
	class B extends A 
	{
		private int j=20;
	}

	If no parent is tightly encapsulted then no child is tighly encapsulated class.



Q) What is the difference between POJO class and Java Bean class?

POJO class
----------
POJO stands for Plain Old Java Object.

A class is said to be POJO class if it supports following two properties.

1) All variables must be private 

2) All variables must have setter and getter method.

Java Bean class
---------------
A class is said to be Java bean class if it supports following four properties.

1) A class should be public.

2) A class should have atleast zero argument constructor.

3) All variables must be private 

4) All variables must have setter and getter method

Note:
-----
Every Java bean class is a POJO class.But every POJO class is not a java bean class.



Is-A Relationship
=================
Is-A relationship is also known as inheritance.

Using "extends" keyword we can implements Is-A relationship.

The main objective of Is-A relationship is to achieve reusability.

ex:

class Parent 
{
	public void m1()
	{
		System.out.println("Parent-M1 Method");
	}
}
class Child extends Parent 
{
	public void m2()
	{
		System.out.println("Child-M2 Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.m1();

		Child c=new Child();
		c.m1();
		c.m2();

		Parent p1=new Child();
		p1.m1();

		Child c1=new Parent(); // invalid 


	}
}

Conclusions
------------
Whatever our parent having properties it comes to child.But whatever our child is having properties it never goes back to parent.

A parent reference can hold child object.But child reference can't hold parent object.



Inheritance
===========
Inheritance is a mechanism we will derived a class in the presence of existing class.

Inheritance is a mechanism where one class will inherit the properties of another class.

The main objective of inheritance is to achieve reusability.

Using extends keyword we can implements inheritance.

We have five types of inheritance in java.

1) Single Level inheritance 

2) Multi Level inheritance

3) Multiple inheritance 

4) Hierarchical inheritance 

5) Hybrid inheritance 


1) Single Level inheritance 
-----------------------------
If a class is derived from one base class is called single level inheritance.

ex:
	A (Parent/Super/Base class)
	|
	|
	|
	B (Child/Sub/Derived class )

ex:

class A
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();

		B b=new B();
		b.m1();
		b.m2();
	}
}


2) Multi Level inheritance
---------------------------
If we derived a class in the presence of one base class and that class is derived from another base class is called multi level inheritance.

ex:
	A
	|
	|
	B
	|
	|
	C 

ex:
class A
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class C extends B 
{
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();

		B b=new B();
		b.m1();
		b.m2();

		C c=new C();
		c.m1();
		c.m2();
		c.m3();
	}
}


3) Multiple inheritance
--------------------------
In java, we can't extends more then one class simultenously because java does not support multiple inheritance.

ex:
	class A {}
	class B {} 
	class C extends A,B --> invalid 
	{
	}

But interface can extends more then one inheritance so we can achieve multiple inheritance through interfaces.
ex:
	interface A {}
	interface B {}
	interface C extends A,B --> valid 
	{
	}

If our class does not extends any other class then it is a direct child class of Object class.

ex:				Diag:
	class A 			Object
	{				|
	}				|
					A

If our class extends some other class then our class is a indirect child class of Object class.

ex:				Diag:	
	class A 			Object
	{				|	
	}				|
	class B extends A 		A
	{				|
					|
	}				B 

Java does not support cyclic inheritence.
ex:
	class A extends B 
	{
	}
	class B extends A 
	{
	}


Q) Why java does not support multiple inheritance?

There is a chance of raising ambiguity problem that's why java does not support multiple inheritance.

ex:
	P1.m1()				p2.m1()
	|------------------------------------|
			|
			c.m1()

















	





























































