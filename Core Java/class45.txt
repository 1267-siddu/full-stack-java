Q) Write a java program to display lucky element from given array?

Input:
	1 1 2 2 2 3 3 3 

output:
	3

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={1,1,2,2,2,3,3,3};
		
		//caller method
		System.out.println(luckyNumber(arr));
	}
	public static  int luckyNumber(int[] arr)
	{
		Map<Integer,Integer> map=new LinkedHashMap<Integer,Integer>();
		
		for(int i=0;i<arr.length;i++)
		{
			if(map.containsKey(arr[i]))
			{
				map.put(arr[i],map.get(arr[i])+1);
			}
			else
			{
				map.put(arr[i],1);
			}
		}
		
		int x=0;
		int max=-1;

		//{1=2,2=3,3=3}
		for(Map.Entry<Integer,Integer> entry: map.entrySet())
		{
			if(entry.getKey() == entry.getValue())
			{
				x=entry.getValue();
				max=Math.max(x,max);
			}
		}

		return max;
	}
}


Multithreading
==============

Q) What is the difference between Thread and Process?

Thread
-------
A thread is a leight weight sub process.

We can run multiple threads concurently.

One thread can communicate with another thread.
ex:
	a class is one thread
	a block is one thread
	a constructor is one thread  

Process
--------
A process is a collection of threads.

We can run multiple process concurently.

One process can't communicate with another process.

ex:
	taking a class using zoom meeting is one process
	typing the notes in editor is one process
	downloading a file from internet is one process s


MultiTasking
=============
Executing several task simultenously such concept is called multitasking.

We have two types of multitasking.

1) Process Based multitasking

2) Thread Based multitasking 


1) Process Based multitasking
------------------------------
Executing several task simultenously where each task is a independent process.
It is best suitable for OS Level.


2) Thread Based multitasking 
-----------------------------
Executing several task simultenously where each task is a same part of a program.
It is best suitable for programmatic level.

MutiThreading
==============
Executing several threads simultenously such concept is called multithreading.

In multithreading, 10% of work should be done by a programmer and 90% of work will be done by JAVA API.

The main important application area of multithreading are.

1) To implements multimedia graphics.

2) To develop video games.

3) To develop animations.


Ways to create a thread in java
===============================
There are two ways to create a thread in java.

1) By extending a Thread class

2) By implementing a Runnable interface 
 

1) By extending a Thread class
------------------------------
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//start a thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case1: Thread Schedular
-----------------------
If multiple threads are waiting for execution which thread has to be execute will decided by thread schedular.

What algorithm,behaviour and mechanism used by thread schedular is depends upon JVM vendor.

Hence we can't expect any execution order or exact output in multithreading.


case2: Difference between t.start() and t.run() method
-------------------------------------------------------
If we invoke t.start() method then new thread will be created which is responsible to execute run() method automatically.

ex:
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//new thread 
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

If we invoke t.run() method then no new thread will be created but run() method will execute just like normal method.

ex:

class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//no new thread 
		t.run();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case3: If we won't override run() method
------------------------------------------
If we won't override run() method then t.start() method will execute Thread class run() method automatically.

But Thread class run() method is empty implementation.Hence we won't get any output from child thread.

ex:
class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//new thread 
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}


case4: If we overload run() method
-----------------------------------
If we overload run() method  then Thread class start() method always execute run() method with no parameters only.

ex:

class MyThread extends Thread 
{
	public void run()
	{
		System.out.println("0-arg method");
	}
	public void run(int i)
	{
		System.out.println("int-arg method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();

		//new thread 
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case 5: Life cycle of a thread
------------------------------
Diagram: class45.1

Once if we create a thread object then our thread will be in new or born state.

Once if we call t.start() method then our threads will be in ready or runnable state.

If thread schedular allocates to CPU then our thread goes to running state.

Once the run() method execution is completed then our thread enters to dead state.


2) By implementing a Runnable interface 
--------------------------------------
class MyRunnable implements Runnable 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test
{
	public static void main(String[] args)
	{
		MyRunnable r=new MyRunnable();
		
		Thread t=new Thread(r); // r is a targatable interface

		//start a thread 
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}


Setting and Getting Name of a thread
====================================
In java, every thread has a name explicitly provided by the programmer or automatically generated by JVM.

We have following methods to set and get name of a thread.

ex:
	public final void setName(String name);
	public final String getName();

ex:
class MyThread extends Thread
{

}
class Test
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getName());//main 

		MyThread t=new MyThread();
		System.out.println(t.getName());//Thread-0

		Thread.currentThread().setName("Parent-Thread");
		System.out.println(Thread.currentThread().getName());//Parent-Thread

		t.setName("Child-Thread");
		System.out.println(t.getName());//Child-Thread
	}
}

Thread Priority
===============
In java, every thread has a priority explicitly provided by the programmer or automatically generated by JVM.

The valid range of thread priority is 1 to 10. Where 1 is a least priority and 10 is a highest priority.

If we take more then 10 priority then we will get IllegalArgumentException.

A Thread defines following standard constants as thread priorties.
ex:
	Thread.MAX_PRIORITY   - 10
	Thread.NORM_PRIORITY  - 5 
	Thread.MIN_PRIORITY   - 1 

We don't have such constants like LOW_PRIORITY and HIGH_PRIORITY.

Thread Schedular uses thread priority while allocating to CPU.

A thread which is having highest priority will be executed first.

If multiple threads having same priority then we can't expect any execution order.

We have following methods to set and get thread priority.
ex:
	public final void setPriority(int priority)
	public final int getPriority() 

ex:

class MyThread extends Thread
{

}
class Test
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getPriority());//5

		MyThread t=new MyThread();
		System.out.println(t.getPriority());//5

		Thread.currentThread().setPriority(9);
		System.out.println(Thread.currentThread().getPriority());//9

		t.setPriority(4);
		System.out.println(t.getPriority());//4

		t.setPriority(11);//R.E IllegalArgumentException
	}
}









































